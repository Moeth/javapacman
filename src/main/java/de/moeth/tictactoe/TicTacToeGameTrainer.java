package de.moeth.tictactoe;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * <b>Developed by KIT Solutions Pvt. Ltd.</b> (www.kitsol.com) on 24-Aug-16.
 * This program is used for training.(Update the move reward based on the win or loose of the game).
 * Here both player are being played automatically and update probability in AllMoveWithReward.txt.
 * AllMoveWithReward.txt file can be any file containing TicTacToe data generated by running TicTacToeData.java or any other old file
 * updated by this program when run earlier.
 */
public class TicTacToeGameTrainer {

    private static Log log = LogFactory.getLog(TicTacToeGameTrainer.class);

    // counter to monitor number of games played as training proceeds.
    private static int totalGameCounter = 0;

    // number of games that player 1 won
    private static int numberOfWinPlayer1 = 0;

    // number of games that player 2 won
    private static int numberOfWinPlayer2 = 0;

    // number of games to play during training.
    private static final int playTotalGame = 1000;

    // number of games played as draw games.
    private static int draw = 0;

    public static void main(String[] args) {

        TicTacToePlayer player = new TicTacToePlayer();
        // sets a player number for first player  it can be 1 or 2, i.e. X or O.
        int firstPlayerNumber = 0;
        try {
            while (totalGameCounter < playTotalGame) {
                firstPlayerNumber %= 2;
                firstPlayerNumber++;

                play(player, firstPlayerNumber);
            }
            player.saveToFile();
        } catch (Exception e) {
//            throw new IllegalArgumentException("", e);
            log.error(e);
        }
    }

    private static void play(final TicTacToePlayer player, final int tempMoveType) {

        log.info("train");
//                Thread.sleep(10);
        // checks whether data file is fully loaded or not before moving further in training.
//                if (player.isAILoad() == true) {

        // create blank board.
        Board board = new Board();

        // increase total games played counter by 1.
        totalGameCounter++;

        // print board to console for logging purpose.
        // we can comment this line if not required.
        board.printBoard();

        // below while loop plays actual game automatically.
        int moveType = tempMoveType;
        while (board.getGameDecision() == 0) {
            // gets next best board move by passing current board state.
            board = player.getNextBestMove(board, moveType);

            // prints board.
            board.printBoard();

            // setting moveType to particular player to request next game board
            moveType = moveType == 1 ? 2 : 1;
        }

        player.applyGameResults(board);
        // verifies current game decision (win or draw)
        int gameState = board.getGameDecision();
        log.info("gameState " + gameState);

        // if gameState != 0, means game is finished with a decision
//        if (gameState != 0) {
        if (gameState == 1) {           // player 1 won
            numberOfWinPlayer1++;
        } else if (gameState == 2) {  // player 2 won
            numberOfWinPlayer2++;
        } else {  // game is draw
            draw++;
        }
        log.info("\nTotal Game :" + totalGameCounter
                + "\n   Player 1:" + numberOfWinPlayer1
                + "\n   Player 2:" + numberOfWinPlayer2
                + "\n   XXDrawOO:" + draw + "\n"
                + "getProbatilityMap: " + player.getPlayer1().getProbatilityMap().filledSize() + " : " + player.getPlayer2().getProbatilityMap().filledSize());
        // exit while loop as current game is finished
//            break;
//        }
    }
}

